---
import { SITES } from "../data";

interface Props {
  highlightSiteId?: number;
}

const { highlightSiteId } = Astro.props;

const sites = await SITES;
---

<bench-map
  data-sites={JSON.stringify(sites)}
  data-highlight={highlightSiteId}
>
  <div style="height: 600px;"></div>
</bench-map>
<script>
  import "leaflet/dist/leaflet.css";
  import L from "leaflet";
  import type { Site } from "../data";
  import { darkMode } from "../browser";
  import { COLORS } from "../pages/marker.[color].svg";
  import { MAX_BOUNDS, MAX_ZOOM } from "../pages/tile.[d].[z].[x].[yr].png";

  class BenchMap extends HTMLElement {
    connectedCallback() {
      // Read the message from the data attribute.
      const sites: Site[] = JSON.parse(this.dataset.sites!);

      const [iconBad, iconOk, iconGood] = COLORS.map((hex) =>
        L.icon({
          iconUrl: `/marker.${hex}.svg`,
          shadowUrl: "/marker.shadow.svg",

          iconSize: [22, 32],
          iconAnchor: [11, 32],
          popupAnchor: [0, -20],
          // tooltipAnchor: [16, -28],
          shadowSize: [22, 15],
          shadowAnchor: [1, 15],
        }),
      );
      const icons = {
        Good: iconGood,
        Replaced: iconOk,
        Removed: iconBad,
        Destroyed: iconBad,
        Proposed: L.icon({
          iconUrl: "/marker.proposed.svg",

          iconSize: [14, 22],
          iconAnchor: [1, 22],
          popupAnchor: [5, -15],
          // tooltipAnchor: [0, 0],
        }),
      };

      const div = this.getElementsByTagName("div")[0]!;
      const map = L.map(div, {
        center: [37.83, -122.3],
        zoom: 11,
        maxBounds: MAX_BOUNDS,
        maxBoundsViscosity: 1.0,
      });
      L.tileLayer(`tile.${darkMode() ? "d" : "l"}.{z}.{x}.{y}.{r}.png`, {
        maxZoom: MAX_ZOOM,
        attribution: import.meta.env.PUBLIC_MAP_ATTRIBUTION,
      }).addTo(map);

      for (const site of sites) {
        const marker = L.marker([site.lat, site.lon], {
          icon: icons[site.benchStatus],
        }).addTo(map);
        // TODO(mingwei): prevent XSS.
        let head = site.name || site.revGeocode || "Unknown";
        if (null != site.id) {
          head = `<a href="/s/${site.id}">${head}</a>`;
        }
        const popup = marker.bindPopup(
          `<h3>${head}</h3>
          <p>Status: ${site.benchStatus}</p>`,
        );
        if (this.dataset.highlight === `${site.id}`) {
          popup.openPopup();
        }
      }
    }
  }

  customElements.define("bench-map", BenchMap);
</script>
