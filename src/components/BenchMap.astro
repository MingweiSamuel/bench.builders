---
import { SITES } from "../data";

interface Props {
  highlightSiteId?: number;
}

const { highlightSiteId } = Astro.props;

const sites = await SITES;
---

<bench-map data-sites={JSON.stringify(sites)} data-highlight={highlightSiteId}>
  <a class="hidden-nav before" href="#">Skip after map</a>
  <div style="height: 600px;"></div>
  <a class="hidden-nav after" href="#">Skip before map</a>
</bench-map>
<script>
  import "leaflet/dist/leaflet.css";
  import L, { type TileLayerOptions } from "leaflet";
  import type { Site } from "../data";
  import { darkMode } from "../browser";
  import { COLORS } from "../pages/marker.[color].svg";
  import { MAX_BOUNDS, MAX_ZOOM } from "../pages/tile/[d].[z].[x].[yr].png";
  import { requestForm } from "../forms";

  class BenchMap extends HTMLElement {
    connectedCallback() {
      // Read the message from the data attribute.
      const sites: Site[] = JSON.parse(this.dataset.sites!);

      const [iconBad, iconOk, iconGood] = COLORS.map((hex) =>
        L.icon({
          iconUrl: `/marker.${hex}.svg`,
          shadowUrl: "/marker.shadow.svg",

          iconSize: [22, 32],
          iconAnchor: [11, 32],
          popupAnchor: [0, -20],
          // tooltipAnchor: [16, -28],
          shadowSize: [22, 15],
          shadowAnchor: [1, 15],
        }),
      );
      const icons = {
        Good: iconGood,
        Replaced: iconOk,
        Removed: iconBad,
        Destroyed: iconBad,
        Proposed: L.icon({
          iconUrl: "/marker.proposed.svg",

          iconSize: [14, 22],
          iconAnchor: [1, 22],
          popupAnchor: [5, -15],
          // tooltipAnchor: [0, 0],
        }),
      };

      const div = this.getElementsByTagName("div")[0]!;
      const map = L.map(div, {
        center: [37.83, -122.3],
        zoom: 11,
        maxZoom: MAX_ZOOM,
        maxBounds: MAX_BOUNDS,
        maxBoundsViscosity: 1.0,
      });
      L.tileLayer(`/tile/{d}.{z}.{x}.{y}{r}.png`, {
        maxZoom: MAX_ZOOM,
        attribution: import.meta.env.PUBLIC_MAP_ATTRIBUTION,
        d: () => (darkMode() ? "d" : "l"),
      } as TileLayerOptions).addTo(map);

      const clickPopup = L.popup();
      map.on("click", (e) => {
        const { lat, lng } = e.latlng;

        const a = document.createElement("a");
        a.href = requestForm(`(${lat}, ${lng})`);
        a.target = "_blank";
        a.innerText = "Request A Bench Here";

        clickPopup
          .setLatLng(e.latlng)
          .setContent(a)
          .openOn(map);
      });

      for (const site of sites) {
        const marker = L.marker([site.lat, site.lon], {
          icon: icons[site.benchStatus],
        }).addTo(map);
        // TODO(mingwei): prevent XSS.
        let head: Node = document.createTextNode(site.name || "Unknown");
        if (null != site.id) {
          const a = document.createElement("a");
          a.href = `/${site.id}`;
          a.appendChild(head);
          head = a;
        }

        const popupDiv = document.createElement("div");
        {
          const h3 = document.createElement("h3");
          h3.appendChild(head);
          const p = document.createElement("p");
          p.innerText = `Status: ${site.benchStatus}`;
          popupDiv.appendChild(h3);
          popupDiv.appendChild(p);
        }

        const popup = marker.bindPopup(popupDiv);
        if (this.dataset.highlight === `${site.id}`) {
          popup.openPopup();
          map.setView([site.lat, site.lon], MAX_ZOOM);
        }
      }
    }
  }

  customElements.define("bench-map", BenchMap);

  document
    .querySelector<HTMLAnchorElement>(".hidden-nav.before")!
    .addEventListener("click", (e) => {
      e.preventDefault();
      document.querySelector<HTMLAnchorElement>(".hidden-nav.after")!.focus();
    });
  document
    .querySelector<HTMLAnchorElement>(".hidden-nav.after")!
    .addEventListener("click", (e) => {
      e.preventDefault();
      document.querySelector<HTMLAnchorElement>(".hidden-nav.before")!.focus();
    });
</script>

<style>
  bench-map {
    display: block;
    position: relative;
  }
  .hidden-nav {
    position: absolute;
    left: -9999px;
    background-color: var(--bg-color);
  }
  .hidden-nav:focus {
    left: 0;
    z-index: 9999;
  }
  .hidden-nav.after {
    bottom: 0;
  }
</style>
