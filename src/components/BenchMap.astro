---
import { SITES } from '../data';

interface Props {}

const {} = Astro.props;

const sites = await SITES;
---

<bench-map data-sites={JSON.stringify(sites)}>
  <div style="height: 600px;"></div>
</bench-map>
<script>
  import "leaflet/dist/leaflet.css";
  import marker from "leaflet/dist/images/marker-icon.png";
  import marker2x from "leaflet/dist/images/marker-icon-2x.png";
  import shadow from "leaflet/dist/images/marker-shadow.png";
  import L from "leaflet";
  import type { Site } from "../data";

  class BenchMap extends HTMLElement {
    connectedCallback() {
      // Read the message from the data attribute.
      const sites: Site[] = JSON.parse(this.dataset.sites!);

      const icon = L.icon({
        iconUrl: marker.src,
        iconRetinaUrl: marker2x.src,
        shadowUrl: shadow.src,

        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        tooltipAnchor: [16, -28],
        shadowSize: [41, 41],
      });

      const div = this.getElementsByTagName('div')[0]!;
      const map = L.map(div).setView([37.83, -122.3], 11);
      L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
        maxZoom: 19,
        attribution:
          '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
      }).addTo(map);

      for (const site of sites) {
        const marker = L.marker([site.lat, site.lon], {
          icon,
        }).addTo(map);
        // TODO(mingwei): prevent XSS.
        marker.bindPopup(`<a href="/${site.id}">${site.revGeocode}</a>`);
      }
    }
  }

  customElements.define('bench-map', BenchMap);
</script>
