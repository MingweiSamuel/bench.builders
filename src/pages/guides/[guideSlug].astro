---
import { getCollection, render } from "astro:content";
import Page from "../../layouts/Page.astro";

export async function getStaticPaths() {
  const guides = await getCollection("guides");
  return guides.map((guide) => ({
    params: { guideSlug: guide.id },
    props: guide,
  }));
}

export const prerender = true;

const guide = Astro.props;
const { Content } = await render(guide);
---

<Page title={guide.data.title} upHref="/guides" upNav="Guides">
  <div
    id="guide-container"
    style="font-size: 0.9em"
    class={guide.data.toc ? "has-toc" : ""}
    data-toc={guide.data.toc}
  >
    <h1>{guide.data.title}</h1>
    <Content />
  </div>
</Page>

<style lang="scss">
  #guide-container {
    &.has-toc :global(nav.toc) {
      display: block;
    }

    :global(nav.toc) {
      display: none;

      position: fixed;
      left: 0;
      top: 0;
      width: 300px;

      :global(li.toc-item > a) {
        opacity: 0.5;
        transition: opacity 50ms ease-in-out;
      }
      :global(li.toc-item.active > a) {
        opacity: 1;
      }

      :global(ol) {
        padding-left: 0;
        margin-left: 20px;

        &:has(> :only-child) {
          /* Hide single-child subsections. */
          display: none;
        }

        :global(li) {
          list-style-type: none;
        }
      }
    }
  }
</style>

<script>
  // ToC script.
  const guideContainer = document.getElementById("guide-container")!;
  if ("true" === guideContainer.dataset.toc) {
    const observer = new IntersectionObserver(
      (entries) => {
        for (const entry of entries) {
          // Get id of first child node.
          const id = entry.target.firstElementChild?.id;
          if (null == id) continue;
          const el = guideContainer.querySelector(`nav.toc li a[href="#${id}"]`);
          if (null == el) continue;

          console.log(id, entry.boundingClientRect, el.parentElement);

          el.parentElement!.classList.toggle("active", entry.isIntersecting);
        }
      },
      { rootMargin: "-20% 0px -20% 0px" },
    );

    // Track all sections.
    guideContainer.querySelectorAll("section").forEach((section) => {
      observer.observe(section);
    });
  }
</script>
