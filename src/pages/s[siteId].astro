---
import Layout from "../layouts/Layout.astro";
import type { GetStaticPaths } from "astro";
import { SITES, getSite } from "../data";

export const prerender = true;
export const getStaticPaths = (async () => {
  const SITE_REGEX = /s(\S+)/;
  return (await SITES).map((site) => ({
    params: {
      siteId: SITE_REGEX.exec(site.id)![1]!,
    },
  }));
}) satisfies GetStaticPaths;

const { siteId } = Astro.params;
const site = (await getSite(`s${siteId}`))!;
---

<Layout title={`Bench.Builders - ${site.revGeocode}`} ` />
<main>
  <h1>{site.revGeocode}</h1>
  <p>{JSON.stringify(site)}</p>
  <h3>Links</h3>
  <ul>
    <li>
      <a target="_blank" href={`https://www.google.com/maps/search/?api=1&query=${site.lat},${site.lon}`}>
        Google Maps
      </a>
    </li>
      {
        site.muni && (
          <li>
            <a target="_blank" href={`https://sfmta.com/${site.muni}`}>
              SFMTA
            </a>
          </li>
        )
      }
      {
        site.act && (
          <li>
            <a target="_blank" href={`https://tp.actransit.org/#/stop/2:${site.act}`}>
              AC Transit Trip Planner
            </a>
          </li>
        )
      }
      {
        site.muni && (
          <li>
            <a target="_blank" href={`https://sfbaytransit.org/search?q=${site.muni}`}>
              SF Bay Transit - Muni
            </a>
          </li>
        )
      }
      {
        site.act && (
          <li>
            <a target="_blank" href={`https://sfbaytransit.org/search?q=${site.act}`}>
              SF Bay Transit - AC Transit
            </a>
          </li>
        )
      }
      {
        site.ggt && (
          <li>
            <a target="_blank" href={`https://sfbaytransit.org/search?q=${site.ggt}`}>
              SF Bay Transit - Golden Gate Transit
            </a>
          </li>
        )
      }
  </ul>
</main>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
